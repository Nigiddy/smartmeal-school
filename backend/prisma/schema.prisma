// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String   @unique
  name      String
  role      UserRole @default(STAFF)
  password  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations - only for admin/staff users
  orders Order[]

  @@map("users")
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  image       String?
  category    String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@map("menu_items")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  userId          String?       // Optional - only for admin/staff orders
  customerName    String        // Customer name for anonymous orders
  customerPhone   String        // Customer phone for anonymous orders
  totalAmount     Decimal       @db.Decimal(10, 2)
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  phoneNumber     String
  transactionId   String?
  mpesaRequestId  String?
  checkoutRequestId String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  unitPrice  Decimal  @db.Decimal(10, 2)
  totalPrice Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model PaymentTransaction {
  id                String   @id @default(cuid())
  orderId           String   @unique
  transactionId     String   @unique
  amount            Decimal  @db.Decimal(10, 2)
  phoneNumber       String
  status            PaymentStatus
  mpesaRequestId    String?
  checkoutRequestId String?
  resultCode        Int?
  resultDesc        String?
  callbackData      Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment_transactions")
}

enum UserRole {
  ADMIN
  STAFF
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
